namespace MinApiLib.Endpoints;

[Generator]
public class EndpointSourceGenerator : IIncrementalGenerator
{
    private const string EndpointInterfaceName = "IEndpoint";
    private const string EndpointAssemblyName = "MinApiLib.Endpoints";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var declarations = context.SyntaxProvider.CreateSyntaxProvider(static (n, _) => n is TypeDeclarationSyntax,
                                                                    static (n, ct) => n.SemanticModel.GetDeclaredSymbol(n.Node, ct) as INamedTypeSymbol)
                                                 .Where(IsEndpoint);
        var endpoints = context.CompilationProvider.Combine(declarations.Collect());

        context.RegisterSourceOutput(endpoints, static (spc, source) => Execute(source.Right, spc));
    }

    private static bool IsEndpoint(INamedTypeSymbol symbol)
        =>  symbol is not null && symbol.AllInterfaces.Any(x => x.Name == EndpointInterfaceName && x.ContainingAssembly.Name == EndpointAssemblyName);

    private static void Execute(ImmutableArray<INamedTypeSymbol> classes, SourceProductionContext context)
    {
        var sb = new StringBuilder();
        sb.AppendLine($@"// <auto-generated/>");
        sb.AppendLine($@"namespace MinApiLib.Endpoints;");
        sb.AppendLine();
        sb.AppendLine($@"internal static class MinApiLibExtensions");
        sb.AppendLine($@"{{");
        sb.AppendLine($@"   public static RouteGroupBuilder MapAotEndpoints(this IEndpointRouteBuilder endpoints)");
        sb.AppendLine($@"   {{");
        sb.AppendLine($@"        var group = endpoints.MapGroup(""/"");");
        foreach (var one in classes)
        {
            var name = $"{GetNamespaceName(one.ContainingNamespace)}.{one.Name}";
            sb.AppendLine($"        group.MapEndpoint<{name}>();");
        }

        sb.AppendLine($@"       return group;");
        sb.AppendLine($@"   }}");
        sb.AppendLine($@"}}");

        // Add the source code to the compilation
        context.AddSource("MinApiLibExtensions.g.cs", sb.ToString());
    }

    private static IEnumerable<INamedTypeSymbol> AllNestedTypesAndSelf(INamedTypeSymbol type)
    {
        yield return type;
        foreach (var typeMember in type.GetTypeMembers())
        {
            foreach (var nestedType in AllNestedTypesAndSelf(typeMember))
            {
                yield return nestedType;
            }
        }
    }

    private static IEnumerable<INamespaceSymbol> GetAllNamespaces(INamespaceSymbol root)
    {
        yield return root;
        foreach (var child in root.GetNamespaceMembers())
            foreach (var next in GetAllNamespaces(child))
                yield return next;
    }

    private static string GetNamespaceName(INamespaceSymbol @namespace)
    {
        var name = @namespace.Name;
        if (@namespace.ContainingNamespace is not null)
        {
            var parent = GetNamespaceName(@namespace.ContainingNamespace);
            if (!string.IsNullOrWhiteSpace(parent))
            {
                return $"{parent}.{name}";
            }
        }

        return name;
    }
}
